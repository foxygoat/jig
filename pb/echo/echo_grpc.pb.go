// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Hello greets.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// HelloClientStream greets everyone at once.
	HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_HelloClientStreamClient, error)
	// HelloServerStream greets repeatedly.
	HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (EchoService_HelloServerStreamClient, error)
	// HelloBiDiStream greets everyone individually.
	HelloBiDiStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_HelloBiDiStreamClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/echo.EchoService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_HelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], "/echo.EchoService/HelloClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceHelloClientStreamClient{stream}
	return x, nil
}

type EchoService_HelloClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type echoServiceHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceHelloClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceHelloClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (EchoService_HelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], "/echo.EchoService/HelloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_HelloServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type echoServiceHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceHelloServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) HelloBiDiStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_HelloBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], "/echo.EchoService/HelloBiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceHelloBiDiStreamClient{stream}
	return x, nil
}

type EchoService_HelloBiDiStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type echoServiceHelloBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceHelloBiDiStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceHelloBiDiStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// Hello greets.
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// HelloClientStream greets everyone at once.
	HelloClientStream(EchoService_HelloClientStreamServer) error
	// HelloServerStream greets repeatedly.
	HelloServerStream(*HelloRequest, EchoService_HelloServerStreamServer) error
	// HelloBiDiStream greets everyone individually.
	HelloBiDiStream(EchoService_HelloBiDiStreamServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedEchoServiceServer) HelloClientStream(EchoService_HelloClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloClientStream not implemented")
}
func (UnimplementedEchoServiceServer) HelloServerStream(*HelloRequest, EchoService_HelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloServerStream not implemented")
}
func (UnimplementedEchoServiceServer) HelloBiDiStream(EchoService_HelloBiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloBiDiStream not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_HelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).HelloClientStream(&echoServiceHelloClientStreamServer{stream})
}

type EchoService_HelloClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type echoServiceHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceHelloClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceHelloClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_HelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).HelloServerStream(m, &echoServiceHelloServerStreamServer{stream})
}

type EchoService_HelloServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type echoServiceHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceHelloServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_HelloBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).HelloBiDiStream(&echoServiceHelloBiDiStreamServer{stream})
}

type EchoService_HelloBiDiStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type echoServiceHelloBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceHelloBiDiStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceHelloBiDiStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _EchoService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloClientStream",
			Handler:       _EchoService_HelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloServerStream",
			Handler:       _EchoService_HelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloBiDiStream",
			Handler:       _EchoService_HelloBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo/echo.proto",
}
