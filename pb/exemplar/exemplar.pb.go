// Sample protos for exemplar testing

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: exemplar/exemplar.proto

package exemplar

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	apipb "google.golang.org/protobuf/types/known/apipb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	sourcecontextpb "google.golang.org/protobuf/types/known/sourcecontextpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	typepb "google.golang.org/protobuf/types/known/typepb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum
type SampleResponse_SampleEnum int32

const (
	SampleResponse_SAMPLE_ENUM_UNSPECIFIED SampleResponse_SampleEnum = 0
	SampleResponse_SAMPLE_ENUM_FIRST       SampleResponse_SampleEnum = 1
	SampleResponse_SAMPLE_ENUM_SECOND      SampleResponse_SampleEnum = 2
)

// Enum value maps for SampleResponse_SampleEnum.
var (
	SampleResponse_SampleEnum_name = map[int32]string{
		0: "SAMPLE_ENUM_UNSPECIFIED",
		1: "SAMPLE_ENUM_FIRST",
		2: "SAMPLE_ENUM_SECOND",
	}
	SampleResponse_SampleEnum_value = map[string]int32{
		"SAMPLE_ENUM_UNSPECIFIED": 0,
		"SAMPLE_ENUM_FIRST":       1,
		"SAMPLE_ENUM_SECOND":      2,
	}
)

func (x SampleResponse_SampleEnum) Enum() *SampleResponse_SampleEnum {
	p := new(SampleResponse_SampleEnum)
	*p = x
	return p
}

func (x SampleResponse_SampleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleResponse_SampleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_exemplar_exemplar_proto_enumTypes[0].Descriptor()
}

func (SampleResponse_SampleEnum) Type() protoreflect.EnumType {
	return &file_exemplar_exemplar_proto_enumTypes[0]
}

func (x SampleResponse_SampleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleResponse_SampleEnum.Descriptor instead.
func (SampleResponse_SampleEnum) EnumDescriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{1, 0}
}

type SampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SampleRequest) Reset() {
	*x = SampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exemplar_exemplar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleRequest) ProtoMessage() {}

func (x *SampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_exemplar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleRequest.ProtoReflect.Descriptor instead.
func (*SampleRequest) Descriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{0}
}

func (x *SampleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A response that contains all types of values to see what form each takes
// in a JSON/jsonnet message.
type SampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic types
	ABool     bool                           `protobuf:"varint,1,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AInt32    int32                          `protobuf:"varint,2,opt,name=a_int32,json=aInt32,proto3" json:"a_int32,omitempty"`
	ASint32   int32                          `protobuf:"zigzag32,3,opt,name=a_sint32,json=aSint32,proto3" json:"a_sint32,omitempty"`
	ASfixed32 int32                          `protobuf:"fixed32,4,opt,name=a_sfixed32,json=aSfixed32,proto3" json:"a_sfixed32,omitempty"`
	AUint32   uint32                         `protobuf:"varint,5,opt,name=a_uint32,json=aUint32,proto3" json:"a_uint32,omitempty"`
	AFixed32  uint32                         `protobuf:"fixed32,6,opt,name=a_fixed32,json=aFixed32,proto3" json:"a_fixed32,omitempty"`
	AInt64    int64                          `protobuf:"varint,7,opt,name=a_int64,json=aInt64,proto3" json:"a_int64,omitempty"`
	ASint64   int64                          `protobuf:"zigzag64,8,opt,name=a_sint64,json=aSint64,proto3" json:"a_sint64,omitempty"`
	ASfixed64 int64                          `protobuf:"fixed64,9,opt,name=a_sfixed64,json=aSfixed64,proto3" json:"a_sfixed64,omitempty"`
	AUint64   uint64                         `protobuf:"varint,10,opt,name=a_uint64,json=aUint64,proto3" json:"a_uint64,omitempty"`
	AFixed64  uint64                         `protobuf:"fixed64,11,opt,name=a_fixed64,json=aFixed64,proto3" json:"a_fixed64,omitempty"`
	AFloat    float32                        `protobuf:"fixed32,12,opt,name=a_float,json=aFloat,proto3" json:"a_float,omitempty"`
	ADouble   float64                        `protobuf:"fixed64,13,opt,name=a_double,json=aDouble,proto3" json:"a_double,omitempty"`
	AString   string                         `protobuf:"bytes,14,opt,name=a_string,json=aString,proto3" json:"a_string,omitempty"`
	ABytes    []byte                         `protobuf:"bytes,15,opt,name=a_bytes,json=aBytes,proto3" json:"a_bytes,omitempty"`
	AEnum     SampleResponse_SampleEnum      `protobuf:"varint,16,opt,name=a_enum,json=aEnum,proto3,enum=exemplar.SampleResponse_SampleEnum" json:"a_enum,omitempty"`
	AMessage  *SampleResponse_SampleMessage1 `protobuf:"bytes,17,opt,name=a_message,json=aMessage,proto3" json:"a_message,omitempty"`
	// Maps
	AMap     map[string]bool                           `protobuf:"bytes,18,rep,name=a_map,json=aMap,proto3" json:"a_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ADeepMap map[string]*SampleResponse_SampleMessage2 `protobuf:"bytes,19,rep,name=a_deep_map,json=aDeepMap,proto3" json:"a_deep_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Repeated
	AIntList     []int32                          `protobuf:"varint,20,rep,packed,name=a_int_list,json=aIntList,proto3" json:"a_int_list,omitempty"`
	AEnumList    []SampleResponse_SampleEnum      `protobuf:"varint,21,rep,packed,name=a_enum_list,json=aEnumList,proto3,enum=exemplar.SampleResponse_SampleEnum" json:"a_enum_list,omitempty"`
	AMessageList []*SampleResponse_SampleMessage1 `protobuf:"bytes,22,rep,name=a_message_list,json=aMessageList,proto3" json:"a_message_list,omitempty"`
	// Oneof
	//
	// Types that are assignable to AOneof:
	//	*SampleResponse_AStringOneof
	//	*SampleResponse_AEnumOneof
	//	*SampleResponse_AMessageOneof
	AOneof isSampleResponse_AOneof `protobuf_oneof:"a_oneof"`
}

func (x *SampleResponse) Reset() {
	*x = SampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exemplar_exemplar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResponse) ProtoMessage() {}

func (x *SampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_exemplar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResponse.ProtoReflect.Descriptor instead.
func (*SampleResponse) Descriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{1}
}

func (x *SampleResponse) GetABool() bool {
	if x != nil {
		return x.ABool
	}
	return false
}

func (x *SampleResponse) GetAInt32() int32 {
	if x != nil {
		return x.AInt32
	}
	return 0
}

func (x *SampleResponse) GetASint32() int32 {
	if x != nil {
		return x.ASint32
	}
	return 0
}

func (x *SampleResponse) GetASfixed32() int32 {
	if x != nil {
		return x.ASfixed32
	}
	return 0
}

func (x *SampleResponse) GetAUint32() uint32 {
	if x != nil {
		return x.AUint32
	}
	return 0
}

func (x *SampleResponse) GetAFixed32() uint32 {
	if x != nil {
		return x.AFixed32
	}
	return 0
}

func (x *SampleResponse) GetAInt64() int64 {
	if x != nil {
		return x.AInt64
	}
	return 0
}

func (x *SampleResponse) GetASint64() int64 {
	if x != nil {
		return x.ASint64
	}
	return 0
}

func (x *SampleResponse) GetASfixed64() int64 {
	if x != nil {
		return x.ASfixed64
	}
	return 0
}

func (x *SampleResponse) GetAUint64() uint64 {
	if x != nil {
		return x.AUint64
	}
	return 0
}

func (x *SampleResponse) GetAFixed64() uint64 {
	if x != nil {
		return x.AFixed64
	}
	return 0
}

func (x *SampleResponse) GetAFloat() float32 {
	if x != nil {
		return x.AFloat
	}
	return 0
}

func (x *SampleResponse) GetADouble() float64 {
	if x != nil {
		return x.ADouble
	}
	return 0
}

func (x *SampleResponse) GetAString() string {
	if x != nil {
		return x.AString
	}
	return ""
}

func (x *SampleResponse) GetABytes() []byte {
	if x != nil {
		return x.ABytes
	}
	return nil
}

func (x *SampleResponse) GetAEnum() SampleResponse_SampleEnum {
	if x != nil {
		return x.AEnum
	}
	return SampleResponse_SAMPLE_ENUM_UNSPECIFIED
}

func (x *SampleResponse) GetAMessage() *SampleResponse_SampleMessage1 {
	if x != nil {
		return x.AMessage
	}
	return nil
}

func (x *SampleResponse) GetAMap() map[string]bool {
	if x != nil {
		return x.AMap
	}
	return nil
}

func (x *SampleResponse) GetADeepMap() map[string]*SampleResponse_SampleMessage2 {
	if x != nil {
		return x.ADeepMap
	}
	return nil
}

func (x *SampleResponse) GetAIntList() []int32 {
	if x != nil {
		return x.AIntList
	}
	return nil
}

func (x *SampleResponse) GetAEnumList() []SampleResponse_SampleEnum {
	if x != nil {
		return x.AEnumList
	}
	return nil
}

func (x *SampleResponse) GetAMessageList() []*SampleResponse_SampleMessage1 {
	if x != nil {
		return x.AMessageList
	}
	return nil
}

func (m *SampleResponse) GetAOneof() isSampleResponse_AOneof {
	if m != nil {
		return m.AOneof
	}
	return nil
}

func (x *SampleResponse) GetAStringOneof() string {
	if x, ok := x.GetAOneof().(*SampleResponse_AStringOneof); ok {
		return x.AStringOneof
	}
	return ""
}

func (x *SampleResponse) GetAEnumOneof() SampleResponse_SampleEnum {
	if x, ok := x.GetAOneof().(*SampleResponse_AEnumOneof); ok {
		return x.AEnumOneof
	}
	return SampleResponse_SAMPLE_ENUM_UNSPECIFIED
}

func (x *SampleResponse) GetAMessageOneof() *SampleResponse_SampleMessage1 {
	if x, ok := x.GetAOneof().(*SampleResponse_AMessageOneof); ok {
		return x.AMessageOneof
	}
	return nil
}

type isSampleResponse_AOneof interface {
	isSampleResponse_AOneof()
}

type SampleResponse_AStringOneof struct {
	AStringOneof string `protobuf:"bytes,23,opt,name=a_string_oneof,json=aStringOneof,proto3,oneof"`
}

type SampleResponse_AEnumOneof struct {
	AEnumOneof SampleResponse_SampleEnum `protobuf:"varint,24,opt,name=a_enum_oneof,json=aEnumOneof,proto3,enum=exemplar.SampleResponse_SampleEnum,oneof"`
}

type SampleResponse_AMessageOneof struct {
	AMessageOneof *SampleResponse_SampleMessage1 `protobuf:"bytes,25,opt,name=a_message_oneof,json=aMessageOneof,proto3,oneof"`
}

func (*SampleResponse_AStringOneof) isSampleResponse_AOneof() {}

func (*SampleResponse_AEnumOneof) isSampleResponse_AOneof() {}

func (*SampleResponse_AMessageOneof) isSampleResponse_AOneof() {}

type WellKnownSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any           *anypb.Any                     `protobuf:"bytes,1,opt,name=any,proto3" json:"any,omitempty"`
	Api           *apipb.Api                     `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	BoolValue     *wrapperspb.BoolValue          `protobuf:"bytes,3,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	BytesValue    *wrapperspb.BytesValue         `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	DoubleValue   *wrapperspb.DoubleValue        `protobuf:"bytes,5,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Duration      *durationpb.Duration           `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Empty         *emptypb.Empty                 `protobuf:"bytes,7,opt,name=empty,proto3" json:"empty,omitempty"`
	AnEnum        *typepb.Enum                   `protobuf:"bytes,8,opt,name=an_enum,json=anEnum,proto3" json:"an_enum,omitempty"`
	EnumValue     *typepb.EnumValue              `protobuf:"bytes,9,opt,name=enum_value,json=enumValue,proto3" json:"enum_value,omitempty"`
	Field         *typepb.Field                  `protobuf:"bytes,10,opt,name=field,proto3" json:"field,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask         `protobuf:"bytes,11,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	FloatValue    *wrapperspb.FloatValue         `protobuf:"bytes,12,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value    *wrapperspb.Int32Value         `protobuf:"bytes,13,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    *wrapperspb.Int64Value         `protobuf:"bytes,14,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	ListValue     *structpb.ListValue            `protobuf:"bytes,15,opt,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	Method        *apipb.Method                  `protobuf:"bytes,16,opt,name=method,proto3" json:"method,omitempty"`
	Mixin         *apipb.Mixin                   `protobuf:"bytes,17,opt,name=mixin,proto3" json:"mixin,omitempty"`
	NullValue     structpb.NullValue             `protobuf:"varint,18,opt,name=null_value,json=nullValue,proto3,enum=google.protobuf.NullValue" json:"null_value,omitempty"`
	AnOption      *typepb.Option                 `protobuf:"bytes,19,opt,name=an_option,json=anOption,proto3" json:"an_option,omitempty"`
	SourceContext *sourcecontextpb.SourceContext `protobuf:"bytes,20,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
	StringValue   *wrapperspb.StringValue        `protobuf:"bytes,21,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	Struct        *structpb.Struct               `protobuf:"bytes,22,opt,name=struct,proto3" json:"struct,omitempty"`
	Timestamp     *timestamppb.Timestamp         `protobuf:"bytes,23,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          *typepb.Type                   `protobuf:"bytes,24,opt,name=type,proto3" json:"type,omitempty"`
	Uint32Value   *wrapperspb.UInt32Value        `protobuf:"bytes,25,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   *wrapperspb.UInt64Value        `protobuf:"bytes,26,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Value         *structpb.Value                `protobuf:"bytes,27,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WellKnownSample) Reset() {
	*x = WellKnownSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exemplar_exemplar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownSample) ProtoMessage() {}

func (x *WellKnownSample) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_exemplar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownSample.ProtoReflect.Descriptor instead.
func (*WellKnownSample) Descriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{2}
}

func (x *WellKnownSample) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *WellKnownSample) GetApi() *apipb.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *WellKnownSample) GetBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *WellKnownSample) GetBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *WellKnownSample) GetDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *WellKnownSample) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WellKnownSample) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *WellKnownSample) GetAnEnum() *typepb.Enum {
	if x != nil {
		return x.AnEnum
	}
	return nil
}

func (x *WellKnownSample) GetEnumValue() *typepb.EnumValue {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *WellKnownSample) GetField() *typepb.Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *WellKnownSample) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *WellKnownSample) GetFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *WellKnownSample) GetInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *WellKnownSample) GetInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *WellKnownSample) GetListValue() *structpb.ListValue {
	if x != nil {
		return x.ListValue
	}
	return nil
}

func (x *WellKnownSample) GetMethod() *apipb.Method {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *WellKnownSample) GetMixin() *apipb.Mixin {
	if x != nil {
		return x.Mixin
	}
	return nil
}

func (x *WellKnownSample) GetNullValue() structpb.NullValue {
	if x != nil {
		return x.NullValue
	}
	return structpb.NullValue(0)
}

func (x *WellKnownSample) GetAnOption() *typepb.Option {
	if x != nil {
		return x.AnOption
	}
	return nil
}

func (x *WellKnownSample) GetSourceContext() *sourcecontextpb.SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

func (x *WellKnownSample) GetStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *WellKnownSample) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *WellKnownSample) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WellKnownSample) GetType() *typepb.Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *WellKnownSample) GetUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *WellKnownSample) GetUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *WellKnownSample) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Message
type SampleResponse_SampleMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string  `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Repeat []int32 `protobuf:"varint,2,rep,packed,name=repeat,proto3" json:"repeat,omitempty"`
}

func (x *SampleResponse_SampleMessage1) Reset() {
	*x = SampleResponse_SampleMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exemplar_exemplar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResponse_SampleMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResponse_SampleMessage1) ProtoMessage() {}

func (x *SampleResponse_SampleMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_exemplar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResponse_SampleMessage1.ProtoReflect.Descriptor instead.
func (*SampleResponse_SampleMessage1) Descriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SampleResponse_SampleMessage1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SampleResponse_SampleMessage1) GetRepeat() []int32 {
	if x != nil {
		return x.Repeat
	}
	return nil
}

type SampleResponse_SampleMessage2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	Weird_FieldName_1_ string                           `protobuf:"bytes,1,opt,name=weird_FieldName_1_,json=weirdFieldName1,proto3" json:"weird_FieldName_1_,omitempty"`
	AStringList        []string                         `protobuf:"bytes,2,rep,name=a_string_list,json=aStringList,proto3" json:"a_string_list,omitempty"`
	AMsgList           []*SampleResponse_SampleMessage1 `protobuf:"bytes,3,rep,name=a_msg_list,json=aMsgList,proto3" json:"a_msg_list,omitempty"`
}

func (x *SampleResponse_SampleMessage2) Reset() {
	*x = SampleResponse_SampleMessage2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exemplar_exemplar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResponse_SampleMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResponse_SampleMessage2) ProtoMessage() {}

func (x *SampleResponse_SampleMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_exemplar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResponse_SampleMessage2.ProtoReflect.Descriptor instead.
func (*SampleResponse_SampleMessage2) Descriptor() ([]byte, []int) {
	return file_exemplar_exemplar_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SampleResponse_SampleMessage2) GetWeird_FieldName_1_() string {
	if x != nil {
		return x.Weird_FieldName_1_
	}
	return ""
}

func (x *SampleResponse_SampleMessage2) GetAStringList() []string {
	if x != nil {
		return x.AStringList
	}
	return nil
}

func (x *SampleResponse_SampleMessage2) GetAMsgList() []*SampleResponse_SampleMessage1 {
	if x != nil {
		return x.AMsgList
	}
	return nil
}

var File_exemplar_exemplar_proto protoreflect.FileDescriptor

var file_exemplar_exemplar_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2f, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x72, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b,
	0x0c, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x07, 0x61, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x09, 0x61, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x61, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07,
	0x61, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x61, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x61, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x08,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x4d, 0x61,
	0x70, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x44, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61,
	0x44, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x49, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x0c, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x6f,
	0x66, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x3e, 0x0a,
	0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x1a, 0xa8, 0x01,
	0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0x2b, 0x0a, 0x12, 0x77, 0x65, 0x69, 0x72, 0x64, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x31, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65,
	0x69, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x08,
	0x61, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x64, 0x0a, 0x0d, 0x41, 0x44, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x02, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xe7, 0x0b, 0x0a,
	0x0f, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x07, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x69, 0x78,
	0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x69, 0x78, 0x69, 0x6e,
	0x52, 0x05, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x88, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x17, 0x2e,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x72, 0x2e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x6f, 0x78, 0x79, 0x67, 0x6f, 0x2e, 0x61, 0x74, 0x2f, 0x6a,
	0x69, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exemplar_exemplar_proto_rawDescOnce sync.Once
	file_exemplar_exemplar_proto_rawDescData = file_exemplar_exemplar_proto_rawDesc
)

func file_exemplar_exemplar_proto_rawDescGZIP() []byte {
	file_exemplar_exemplar_proto_rawDescOnce.Do(func() {
		file_exemplar_exemplar_proto_rawDescData = protoimpl.X.CompressGZIP(file_exemplar_exemplar_proto_rawDescData)
	})
	return file_exemplar_exemplar_proto_rawDescData
}

var file_exemplar_exemplar_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_exemplar_exemplar_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_exemplar_exemplar_proto_goTypes = []interface{}{
	(SampleResponse_SampleEnum)(0),        // 0: exemplar.SampleResponse.SampleEnum
	(*SampleRequest)(nil),                 // 1: exemplar.SampleRequest
	(*SampleResponse)(nil),                // 2: exemplar.SampleResponse
	(*WellKnownSample)(nil),               // 3: exemplar.WellKnownSample
	(*SampleResponse_SampleMessage1)(nil), // 4: exemplar.SampleResponse.SampleMessage1
	(*SampleResponse_SampleMessage2)(nil), // 5: exemplar.SampleResponse.SampleMessage2
	nil,                                   // 6: exemplar.SampleResponse.AMapEntry
	nil,                                   // 7: exemplar.SampleResponse.ADeepMapEntry
	(*anypb.Any)(nil),                     // 8: google.protobuf.Any
	(*apipb.Api)(nil),                     // 9: google.protobuf.Api
	(*wrapperspb.BoolValue)(nil),          // 10: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),         // 11: google.protobuf.BytesValue
	(*wrapperspb.DoubleValue)(nil),        // 12: google.protobuf.DoubleValue
	(*durationpb.Duration)(nil),           // 13: google.protobuf.Duration
	(*emptypb.Empty)(nil),                 // 14: google.protobuf.Empty
	(*typepb.Enum)(nil),                   // 15: google.protobuf.Enum
	(*typepb.EnumValue)(nil),              // 16: google.protobuf.EnumValue
	(*typepb.Field)(nil),                  // 17: google.protobuf.Field
	(*fieldmaskpb.FieldMask)(nil),         // 18: google.protobuf.FieldMask
	(*wrapperspb.FloatValue)(nil),         // 19: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),         // 20: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),         // 21: google.protobuf.Int64Value
	(*structpb.ListValue)(nil),            // 22: google.protobuf.ListValue
	(*apipb.Method)(nil),                  // 23: google.protobuf.Method
	(*apipb.Mixin)(nil),                   // 24: google.protobuf.Mixin
	(structpb.NullValue)(0),               // 25: google.protobuf.NullValue
	(*typepb.Option)(nil),                 // 26: google.protobuf.Option
	(*sourcecontextpb.SourceContext)(nil), // 27: google.protobuf.SourceContext
	(*wrapperspb.StringValue)(nil),        // 28: google.protobuf.StringValue
	(*structpb.Struct)(nil),               // 29: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),         // 30: google.protobuf.Timestamp
	(*typepb.Type)(nil),                   // 31: google.protobuf.Type
	(*wrapperspb.UInt32Value)(nil),        // 32: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),        // 33: google.protobuf.UInt64Value
	(*structpb.Value)(nil),                // 34: google.protobuf.Value
}
var file_exemplar_exemplar_proto_depIdxs = []int32{
	0,  // 0: exemplar.SampleResponse.a_enum:type_name -> exemplar.SampleResponse.SampleEnum
	4,  // 1: exemplar.SampleResponse.a_message:type_name -> exemplar.SampleResponse.SampleMessage1
	6,  // 2: exemplar.SampleResponse.a_map:type_name -> exemplar.SampleResponse.AMapEntry
	7,  // 3: exemplar.SampleResponse.a_deep_map:type_name -> exemplar.SampleResponse.ADeepMapEntry
	0,  // 4: exemplar.SampleResponse.a_enum_list:type_name -> exemplar.SampleResponse.SampleEnum
	4,  // 5: exemplar.SampleResponse.a_message_list:type_name -> exemplar.SampleResponse.SampleMessage1
	0,  // 6: exemplar.SampleResponse.a_enum_oneof:type_name -> exemplar.SampleResponse.SampleEnum
	4,  // 7: exemplar.SampleResponse.a_message_oneof:type_name -> exemplar.SampleResponse.SampleMessage1
	8,  // 8: exemplar.WellKnownSample.any:type_name -> google.protobuf.Any
	9,  // 9: exemplar.WellKnownSample.api:type_name -> google.protobuf.Api
	10, // 10: exemplar.WellKnownSample.bool_value:type_name -> google.protobuf.BoolValue
	11, // 11: exemplar.WellKnownSample.bytes_value:type_name -> google.protobuf.BytesValue
	12, // 12: exemplar.WellKnownSample.double_value:type_name -> google.protobuf.DoubleValue
	13, // 13: exemplar.WellKnownSample.duration:type_name -> google.protobuf.Duration
	14, // 14: exemplar.WellKnownSample.empty:type_name -> google.protobuf.Empty
	15, // 15: exemplar.WellKnownSample.an_enum:type_name -> google.protobuf.Enum
	16, // 16: exemplar.WellKnownSample.enum_value:type_name -> google.protobuf.EnumValue
	17, // 17: exemplar.WellKnownSample.field:type_name -> google.protobuf.Field
	18, // 18: exemplar.WellKnownSample.field_mask:type_name -> google.protobuf.FieldMask
	19, // 19: exemplar.WellKnownSample.float_value:type_name -> google.protobuf.FloatValue
	20, // 20: exemplar.WellKnownSample.int32_value:type_name -> google.protobuf.Int32Value
	21, // 21: exemplar.WellKnownSample.int64_value:type_name -> google.protobuf.Int64Value
	22, // 22: exemplar.WellKnownSample.list_value:type_name -> google.protobuf.ListValue
	23, // 23: exemplar.WellKnownSample.method:type_name -> google.protobuf.Method
	24, // 24: exemplar.WellKnownSample.mixin:type_name -> google.protobuf.Mixin
	25, // 25: exemplar.WellKnownSample.null_value:type_name -> google.protobuf.NullValue
	26, // 26: exemplar.WellKnownSample.an_option:type_name -> google.protobuf.Option
	27, // 27: exemplar.WellKnownSample.source_context:type_name -> google.protobuf.SourceContext
	28, // 28: exemplar.WellKnownSample.string_value:type_name -> google.protobuf.StringValue
	29, // 29: exemplar.WellKnownSample.struct:type_name -> google.protobuf.Struct
	30, // 30: exemplar.WellKnownSample.timestamp:type_name -> google.protobuf.Timestamp
	31, // 31: exemplar.WellKnownSample.type:type_name -> google.protobuf.Type
	32, // 32: exemplar.WellKnownSample.uint32_value:type_name -> google.protobuf.UInt32Value
	33, // 33: exemplar.WellKnownSample.uint64_value:type_name -> google.protobuf.UInt64Value
	34, // 34: exemplar.WellKnownSample.value:type_name -> google.protobuf.Value
	4,  // 35: exemplar.SampleResponse.SampleMessage2.a_msg_list:type_name -> exemplar.SampleResponse.SampleMessage1
	5,  // 36: exemplar.SampleResponse.ADeepMapEntry.value:type_name -> exemplar.SampleResponse.SampleMessage2
	1,  // 37: exemplar.Exemplar.Sample:input_type -> exemplar.SampleRequest
	1,  // 38: exemplar.Exemplar.WellKnown:input_type -> exemplar.SampleRequest
	2,  // 39: exemplar.Exemplar.Sample:output_type -> exemplar.SampleResponse
	3,  // 40: exemplar.Exemplar.WellKnown:output_type -> exemplar.WellKnownSample
	39, // [39:41] is the sub-list for method output_type
	37, // [37:39] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_exemplar_exemplar_proto_init() }
func file_exemplar_exemplar_proto_init() {
	if File_exemplar_exemplar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exemplar_exemplar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exemplar_exemplar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exemplar_exemplar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exemplar_exemplar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResponse_SampleMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exemplar_exemplar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResponse_SampleMessage2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_exemplar_exemplar_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SampleResponse_AStringOneof)(nil),
		(*SampleResponse_AEnumOneof)(nil),
		(*SampleResponse_AMessageOneof)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exemplar_exemplar_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exemplar_exemplar_proto_goTypes,
		DependencyIndexes: file_exemplar_exemplar_proto_depIdxs,
		EnumInfos:         file_exemplar_exemplar_proto_enumTypes,
		MessageInfos:      file_exemplar_exemplar_proto_msgTypes,
	}.Build()
	File_exemplar_exemplar_proto = out.File
	file_exemplar_exemplar_proto_rawDesc = nil
	file_exemplar_exemplar_proto_goTypes = nil
	file_exemplar_exemplar_proto_depIdxs = nil
}
